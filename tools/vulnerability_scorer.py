#!/usr/bin/env python3
"""
Vulnerability Scoring Module
Handles security score calculation and vulnerability classification
"""

class VulnerabilityScorer:
    def __init__(self):
        self.severity_map = {
            "high": ["xss", "outdated", "sensitive path", "wordpress vulnerabilities", "pwned"],
            "medium": ["directory listing", "server header", "insecure cookies", "pwned"],
            "low": ["x-powered-by", "x-frame-options", "x-content-type-options", 
                   "strict-transport-security", "content-security-policy"]
        }
        
        # Update severity mapping to include nuclei findings
        self.severity_map["high"].extend(["nuclei: critical", "nuclei: high", "cve-", "exploit"])
        self.severity_map["medium"].extend(["nuclei: medium", "exposed-panel"])
        self.severity_map["low"].extend(["nuclei: low", "nuclei: info"])
    
    def get_severity(self, vulnerability):
        """Determine severity level of a vulnerability"""
        vuln_lower = vulnerability.lower()
        for level, keywords in self.severity_map.items():
            if any(keyword in vuln_lower for keyword in keywords):
                return level
        return "info"
    
    def calculate_score(self, vulnerabilities, nuclei_findings, scan_results):
        """
        Calculate security score as percentage (0-100%)
        100% = completely secure, decreases based on vulnerabilities
        """
        # Start with perfect score
        base_score = 100
        total_deduction = 0
        
        # Count vulnerabilities by severity
        high_count = 0
        medium_count = 0
        low_count = 0
        critical_count = 0
        
        for vuln in vulnerabilities:
            severity = self.get_severity(vuln)
            if severity == "high":
                high_count += 1
            elif severity == "medium":
                medium_count += 1
            elif severity == "low":
                low_count += 1
        
        # Count nuclei critical findings
        for finding in nuclei_findings:
            if finding.get('severity') == 'critical':
                critical_count += 1
        
        # Calculate deductions
        if critical_count > 0:
            critical_deduction = min(critical_count * 35, 70)
            total_deduction += critical_deduction
        
        if high_count > 0:
            high_deduction = min(high_count * 25, 60)
            total_deduction += high_deduction
        
        if medium_count > 0:
            medium_deduction = min(medium_count * 15, 40)
            total_deduction += medium_deduction
        
        if low_count > 0:
            low_deduction = min(low_count * 5, 20)
            total_deduction += low_deduction
        
        # Calculate base final score
        final_score = max(0, base_score - total_deduction)
        
        # Add bonus points for good security practices
        bonus_points = self.calculate_bonus_points(scan_results, nuclei_findings)
        
        # Apply bonus (max 100%)
        final_score = min(100, final_score + bonus_points)
        
        return {
            "score": final_score,
            "grade": self.get_security_grade(final_score),
            "breakdown": {
                "critical": critical_count,
                "high": high_count,
                "medium": medium_count,
                "low": low_count,
                "bonus": bonus_points,
                "total_deduction": total_deduction
            }
        }
    
    def calculate_bonus_points(self, scan_results, nuclei_findings):
        """Calculate bonus points for good security practices"""
        bonus_points = 0
        
        # Bonus for HTTPS enforcement
        if any("https" in str(result).lower() for result in scan_results.values()):
            bonus_points += 2
        
        # Bonus for security headers
        security_headers = ["strict-transport-security", "content-security-policy", 
                           "x-frame-options", "x-content-type-options"]
        if any(header in str(scan_results).lower() for header in security_headers):
            bonus_points += 3
        
        # Bonus for no exposed sensitive ports
        sensitive_ports = ["21", "22", "23", "25", "53", "110", "143", "993", "995"]
        nmap_output = scan_results.get("nmap_raw", "")
        if nmap_output and not any(port in nmap_output for port in sensitive_ports):
            bonus_points += 2
        
        # Bonus for clean nuclei scan
        if len(nuclei_findings) == 0:
            bonus_points += 5
        
        return bonus_points
    
    def get_security_grade(self, score):
        """Convert percentage score to letter grade"""
        if score >= 90:
            return "A+"
        elif score >= 80:
            return "A"
        elif score >= 70:
            return "B"
        elif score >= 60:
            return "C"
        elif score >= 50:
            return "D"
        else:
            return "F"
    
    def group_vulnerabilities(self, vulnerabilities):
        """Group vulnerabilities by severity level"""
        grouped = {"high": [], "medium": [], "low": [], "info": []}
        
        for vuln in vulnerabilities:
            level = self.get_severity(vuln)
            grouped[level].append(vuln)
        
        return grouped

def main():
    """Test the Vulnerability Scorer"""
    scorer = VulnerabilityScorer()
    
    # Test vulnerabilities
    test_vulns = [
        "X-Powered-By header exposes technology: PHP/7.4",
        "Server header reveals information: Apache/2.4.7",
        "Directory listing enabled - information disclosure",
        "Nuclei: XSS vulnerability detected (Severity: high)"
    ]
    
    test_nuclei = [
        {"severity": "high", "name": "XSS vulnerability"},
        {"severity": "medium", "name": "Information disclosure"}
    ]
    
    test_results = {"nmap_raw": "22/tcp open ssh"}
    
    score_result = scorer.calculate_score(test_vulns, test_nuclei, test_results)
    grouped = scorer.group_vulnerabilities(test_vulns)
    
    print(f"Security Score: {score_result['score']}% (Grade: {score_result['grade']})")
    print(f"Breakdown: {score_result['breakdown']}")
    print(f"Grouped vulnerabilities: {grouped}")

if __name__ == "__main__":
    main()
